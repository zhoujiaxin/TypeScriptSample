
/*
    TypeScript最新版本为3.2.2，Angular使用的版本为V3.1.6
*/

{
  "compilerOptions": {
    /* Basic Options */
    "target": "es5",                          /* 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'。 */
    "module": "commonjs",                     /* 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'。 */
    // "lib": [],                             /* 指定要包含在编译中的库文件。 */
    // "allowJs": true,                       /* 允许编译 javascript 文件。 */
    // "checkJs": false,                      /* 报告 javascript 文件中的错误。 */
    // "jsx": "preserve",                     /* 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'。 */
    // "declaration": true,                   /* 生成相应的 '.d.ts' 文件。 */
    // "declarationMap": true,                /* 生成相应的 '.d.ts.map' 文件。 */
    // "sourceMap": true,                     /* 生成相应的 '.map' 文件。 */
    // "outFile": "./build/sample.js",        /* 将输出文件合并为一个文件。 */
    "outDir": "./build",                      /* 指定输出目录。 */
    // "rootDir": "./",                       /* 用来控制输出目录结构 --outDir。 */
    // "composite": true,                     /* 帮助TypeScript快速确定引用工程的输出文件位置，引用工程设置需打开选项，declaration必须为true，--V3.0+ */
    // "removeComments": true,                /* 删除编译后的所有的注释。 */
    // "noEmit": true,                        /* 不生成输出文件。 */
    // "importHelpers": true,                 /* 从 tslib 导入辅助工具函数。 */
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // "isolatedModules": true,               /* 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）。 */

    /* 严格的类型检查选项 */
    "strict": true,                           /* 启用所有严格类型检查选项。 */
    // "noImplicitAny": true,                 /* 在表达式和声明上有隐含的 any类型时报错。 */
    // "strictNullChecks": true,              /* 启用严格的 null 检查。--V3.2 */
    // "strictFunctionTypes": true,           /* 启用严格的 函数类型 检查。--V3.2 */
    // "strictBindCallApply": true,           /* 启用严格的 bind/call/apply 检查。--V3.2 */
    // "strictPropertyInitialization": true,  /* 启用严格的 类属性初始化 检查。(定义了属性，没有初始化，提示错误，默认值true)--V3.2 */
    // "noImplicitThis": true,                /* 当 this 表达式值为 any 类型的时候，生成一个错误。 */
    // "alwaysStrict": true,                  /* 以严格模式检查每个模块，并在每个文件里加入 'use strict'。 */

    /* 额外的检查 */
    // "noUnusedLocals": true,                /* 有未使用的变量时，抛出错误。 */
    // "noUnusedParameters": true,            /* 有未使用的参数时，抛出错误。 */
    // "noImplicitReturns": true,             /* 并不是所有函数里的代码都有返回值时，抛出错误。 */
    // "noFallthroughCasesInSwitch": true,    /* 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）。 */

    /* 模块解析选项 */
    // "moduleResolution": "node",            /* 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)。 */
    // "baseUrl": "./",                       /* 用于解析非相对模块名称的基目录。 */
    // "paths": {},                           /* 模块名到基于 baseUrl 的路径映射的列表。 */
    // "rootDirs": [],                        /* 根文件夹列表，其组合内容表示项目运行时的结构内容。 */
    // "typeRoots": [],                       /* 包含类型声明的文件列表。 */
    // "types": [],                           /* 需要包含的类型声明文件名列表。 */
    // "allowSyntheticDefaultImports": true,  /* 允许从没有设置默认导出的模块中默认导入。 */
    "esModuleInterop": true                   /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */

    /* 源码映射选项 */
    // "sourceRoot": "",                      /* 指定调试器应该找到 TypeScript 文件而不是源文件的位置。 */
    // "mapRoot": "",                         /* 指定调试器应该找到映射文件而不是生成文件的位置。 */
    // "inlineSourceMap": true,               /* 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件。 */
    // "inlineSources": true,                 /* 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性。 */

    /* 其他选项 */
    // "experimentalDecorators": true,        /* 启用实验性功能，支持ES7装饰器。 */
    // "emitDecoratorMetadata": true,         /* 启用实验性功能，支持ES7装饰器元数据发布。？ */
  },

  "exclude": [                                /* 指定排除文件，支持通配符。 */
    "sample_14_modules/*",
    "sample_15_namespaces/demo/*"
  ]

  // "include": []                            /* 指定包含文件。 */
  // "files": []
  // "references": [                          /* 指定引用工程，工程引用为V3.0新特性，支持将TypeScript程序的结构分割成更小的组成部分，改善构建时间，强制在逻辑上对组件进行分离，更好地组织你的代码。--V3.0+ */
    // { "path": "../src" }                   /* 每个引用的path属性都可以指向到包含tsconfig.json文件的目录，或者直接指向到配置文件本身（名字是任意的） */
  // ]                                        /* prepend属性启用某个前置依赖 */
  // "typeAcquisition": {}
  // "compileOnSave": false
}